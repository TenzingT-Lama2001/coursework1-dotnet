@page "/requests"
@inject IJSRuntime JSRuntime;

<ul class="nav nav-tabs">
    <h1 class="navbar-brand mb-5 h1">Requested Items</h1>
</ul>

<table class="table">
    <thead>
        <tr>

            <th>
                <div class="d-flex">
                    Item Name
                    <a class='btn text-@(_sortBy == "ItemName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                        @onclick='()=>SortByHandler("ItemName")'>
                        <span class='oi oi-sort-@(_sortBy == "ItemName" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Quantity
                    <a class='btn text-@(_sortBy == "quantity" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                        @onclick='()=>SortByHandler("quantity")'>
                        <span class='oi oi-sort-@(_sortBy == "quantity" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class=" d-flex ">
                    Username

                 
                </div>
            </th>
                        <th>
                <div class="d-flex">
                    Status
                    <a class='btn text-@(_sortBy == "status" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                       @onclick='()=>SortByHandler("status")'>
                        <span class='oi oi-sort-@(_sortBy == "status" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<RequestedItem> itemList = _requestedItems;

            if (_sortBy == "ItemName")
            {
                itemList = _sortDirection == "ascending" ? itemList.OrderBy(t => t.ItemName) : itemList.OrderByDescending(t =>
                t.ItemName);
            }
            else if (_sortBy == "quantity")
            {
                itemList = _sortDirection == "ascending" ? itemList.OrderBy(t => t.Quantity) : itemList.OrderByDescending(t =>
                t.Quantity);
            }
                        else if (_sortBy == "status")
            {
                itemList = _sortDirection == "ascending" ? itemList.OrderBy(t => t.Status) : itemList.OrderByDescending(t =>
                t.Status);
            }





            foreach (var RequestedItem in itemList)
            {
                                    <tr>

                        <td>@RequestedItem.ItemName</td>
                                        <td>
                            @RequestedItem.Quantity
                                        </td>
                                    <td>
                                        <p class="small mb-0">
                                @RequestedItem.UserName
                                        </p>
                                    </td>
                    <td>
                        <p class="small mb-0">
                            @RequestedItem.Status
                        </p>
                    </td>
         
                                    <td>


                                    

                        @if (RequestedItem.Status.Equals(_isApproved))
                        {
                             JSRuntime.InvokeAsync<object>("console.log", "The _isApproved value is: " + _isApproved);
                            <button class='btn btn-success' type="button"
                       >
                                <span class="oi oi-check" /> Approved
                            </button>
                        }
                        else{
                                      <button class='btn btn-outline-warning' type="button"
                            @onclick="()=>OpenApproveItemDialog(RequestedItem)">
                                        <span class="oi oi-pencil" /> Approve
                                    </button>
                            <button class='btn btn-outline-danger' type="button" @onclick="()=>OpenDeclineItemDialog(RequestedItem)">
                                        <span class="oi oi-delete" /> Decline
                            </button>
                        }

                
                 


                                    </td>
                                </tr>
            }
        }
    </tbody>
</table>

@if (_showApproveItemDialog)
{
        <ModalDialog Title="@_dialogTitle" OnClose="@OnCloseApproveItemDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating">
            <input id="ItemName" type="text" class="form-control" @bind="_requestedItemModel.ItemName" placeholder="Item Name" disabled/>
            <label for="ItemName">Item Name</label>
        </div>
            <div class="form-floating">
            <input id="ItemName" type="text" class="form-control" @bind="_requestedItemModel.Quantity" placeholder="Item Quantity" disabled />
            <label for="ItemName">Item Quantity</label>
        </div>

               
         <div class="form-floating">
            <input id="ItemName" type="text" class="form-control" @bind="_requestedItemModel.UserName" placeholder="User Name" disabled />
            <label for="ItemName"> User Name</label>
        </div>


        @if (!string.IsNullOrEmpty(_approveItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_approveItemErrorMessage" />
        }
            </ModalDialog>
}


@if (_showDeclineItemDialog)
{
        <ModalDialog Title="Decline Request" OnClose="@OnDeclineItemDialogClose" OkLabel="Decline">
        <p>Are you sure you want to decline <strong>@_declineItem.ItemName</strong> item?</p>
        @if (!string.IsNullOrEmpty(_declineItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_declineItemErrorMessage" />
        }
            </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showDeclineItemDialog { get; set; }
    private bool _showApproveItemDialog { get; set; }
    private List<InventoryItem> _items { get; set; }
    private List<RequestedItem> _requestedItems { get; set; }
    private InventoryItem _deleteItem { get; set; }
    private RequestedItem _declineItem { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _approveItemErrorMessage { get; set; }
    private string _declineItemErrorMessage { get; set; }
    private InventoryItem _itemModel { get; set; }
    private RequestedItem _requestedItemModel { get; set; }
    private string _tabFilter = "All";
    private string _sortBy = "dueDate";
    private string _sortDirection = "ascending";
    private string _adminName;
    private User _admin;
    private string _requestedBy;
    private string _role;
    private Status _isApproved = Status.Approved;



    protected override void OnInitialized()
    {
        _requestedItems = InventoryItemService.GetAllRequestedItems();


        _admin = UsersService.GetById(_globalState.CurrentUser.Id);
        _adminName = _admin.Username.ToString();

        _role = _admin.Role.ToString();



    }

    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }



    private void SearchItemName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
        {
            // Get all items whose ItemName property contains the search term (case-insensitive)
            _items = InventoryItemService.GetAllItems().Where(t => t.ItemName.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
        else
        {
            // If the search term is empty or null, or if it has a length less than 3, return the full list of items
            _items = InventoryItemService.GetAllItems();
        }
    }

    private void OpenApproveItemDialog(RequestedItem requestedItem)
    {
        _dialogTitle = "Approve Item";
        _dialogOkLabel = "Approve";

        _requestedItemModel = requestedItem;


        _requestedBy = _requestedItemModel.UserName.ToString();


        _showApproveItemDialog = true;
    }

    private void OpenDeclineItemDialog(RequestedItem requestedItem)
    {
        _declineItem = requestedItem;
        _showDeclineItemDialog = true;
    }


    private void  OnCloseApproveItemDialogClose(bool isCancel){

        if (isCancel)
        {
            _showApproveItemDialog = false;
        }
        else
        {
            try

            {
                _approveItemErrorMessage = "";

                string itemName = _requestedItemModel.ItemName;
                int quantity = _requestedItemModel.Quantity;
                Guid id = _requestedItemModel.Id;
                bool isApproved = true;
                DateTime currentTime = DateTime.Now;
                DateTime startTime = new DateTime(currentTime.Year, currentTime.Month, currentTime.Day, 9, 0, 0);
                DateTime endTime = new DateTime(currentTime.Year, currentTime.Month, currentTime.Day, 16, 0, 0);

                if (currentTime >= startTime && currentTime <= endTime && currentTime.DayOfWeek >= DayOfWeek.Monday && currentTime.DayOfWeek <= DayOfWeek.Friday)
                {
                    _requestedItems = InventoryItemService.ApproveItem(_adminName, _requestedBy, itemName, quantity, id,isApproved);
                    InventoryItemService.UpdateDetailedInventory();
                    _showApproveItemDialog = false;
                }
                else{
                    _approveItemErrorMessage = "You can only approve from Monday to Friday between 9 AM to 4 PM";
                }
                
                
            
            }
            catch (Exception e)
            {
                _approveItemErrorMessage = e.Message;
            }
        }

    }

    private void OnDeclineItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeclineItemDialog = false;
            _declineItem = null;
        }
        else
        {
            try
            {
                _declineItemErrorMessage = "";

                _showDeclineItemDialog = false;
                _requestedItems = InventoryItemService.DeclineRequestedItem(_declineItem.Id);
                _declineItem = null;
            }
            catch (Exception e)
            {
                _declineItemErrorMessage = e.Message;
            }
        }
    }
    private void TabFilter(string status)
    {
        _tabFilter = status;
    }

}
