@page "/inventory"

<nav class="navbar navbar-light bg-light justify-content-between">
    <h1 class="navbar-brand mb-5 h1">Inventory</h1>
    <button class='btn btn-primary @(_role == "User" ? "display-none" : "" )' type="button" @onclick="OpenAddItemDialog">
        <span class="oi oi-plus" /> Add item
    </button>
             

        
</nav>


<table class="table">
    <thead>
        <tr>

            <th>
                <div class="d-flex">
                    Item Name
                   
                    <a class='btn text-@(_sortBy == "ItemName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                        @onclick='()=>SortByHandler("ItemName")'>
                        <span class='oi oi-sort-@(_sortBy == "ItemName" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Quantity
                    <a class='btn text-@(_sortBy == "quantity" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                        @onclick='()=>SortByHandler("quantity")'>
                        <span class='oi oi-sort-@(_sortBy == "quantity" ? _sortDirection : "ascending")' />
                    </a>
                </div>

  
            </th>
            <th>
                
      <input type="search" class="form-control search d-flex" placeholder="Search by item name" @oninput="SearchItemName" />
            </th>
            <th></th>
        </tr>

    </thead>
    <tbody>
        @{
            IEnumerable<InventoryItem> itemList = _items;

            if (_sortBy == "ItemName")
            {
                itemList = _sortDirection == "ascending" ? itemList.OrderBy(t => t.ItemName) : itemList.OrderByDescending(t =>
                t.ItemName);
            }
            else if (_sortBy == "quantity")
            {
                itemList = _sortDirection == "ascending" ? itemList.OrderBy(t => t.Quantity) : itemList.OrderByDescending(t =>
                t.Quantity);
            }





            foreach (var InventoryItem in itemList)

            {
                if (@InventoryItem.Quantity > 0)
                {
                    <tr>

                        <td>@InventoryItem.ItemName</td>
                        <td>

                            @InventoryItem.Quantity
                        </td>

                        <td>


                            <button class='btn btn-outline-dark @(_role == "Admin" ? "display-none" : "")' type="button"
                            @onclick="()=>OpenTakeOutItemDialog(InventoryItem)">
                                <span class="oi oi-action-undo" /> Take out
                            </button>

                            <button class='btn btn-outline-secondary  @(_role == "User" ? "display-none" : "")' type="button"
                            @onclick="()=>OpenEditItemDialog(InventoryItem)">
                                <span class="oi oi-pencil" /> Edit
                            </button>
                            <button class='btn btn-outline-danger @(_role == "User" ? "display-none" : "")' type="button" @onclick="()=>OpenDeleteItemDialog(InventoryItem)">
                                <span class="oi oi-delete" /> Delete
                            </button>


                        </td>
                    </tr>
                }
            }
        }
    </tbody>
</table>

@if (_showEditItemDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditItemDialogClose" OkLabel="@_dialogOkLabel">
    <div class="form-floating">
        <input id="ItemName" type="text" class="form-control" @bind="_itemModel.ItemName" placeholder="Item Name" />
        <label for="ItemName">Item Name</label>
    </div>
        <div class="form-floating">
        <input id="ItemName" type="text" class="form-control" @bind="_itemModel.Quantity" placeholder="Item Quantity" />
        <label for="ItemName">Item Quantity</label>
    </div>


    @if (!string.IsNullOrEmpty(_editItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editItemErrorMessage" />
        }
        </ModalDialog>
}

@if (_showTakeOutItemDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnTakeOutItemDialogClose" OkLabel="@_dialogOkLabel">
        <div class="form-floating">
            <input id="ItemName" type="text" class="form-control" @bind="_itemModel.ItemName" placeholder="Item Name" disabled/>
            <label for="ItemName">Item Name</label>
        </div>
        <div class="form-floating">
            <input id="ItemQuantity" type="text" class="form-control" @bind="_takeQuantity" placeholder="Item Quantity" />
            <label for="ItemQuantity">Item Quantity</label>
        </div>


        @if (!string.IsNullOrEmpty(_takeOutItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_takeOutItemErrorMessage" />
        }
    </ModalDialog>
}

@if (_showDeleteItemDialog)
{
    <ModalDialog Title="Delete Item" OnClose="@OnDeleteItemDialogClose" OkLabel="Confirm">
    <p>Are you sure you want to delete <strong>@_deleteItem.ItemName</strong></p>
    @if (!string.IsNullOrEmpty(_deleteItemErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteItemErrorMessage" />
        }
        </ModalDialog>
}

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showEditItemDialog { get; set; }
    private bool _showDeleteItemDialog { get; set; }
    private bool _showTakeOutItemDialog { get; set; }
    private List<InventoryItem> _items { get; set; }
    private List<RequestedItem> _requestedItems { get; set; }
    private InventoryItem _deleteItem { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _editItemErrorMessage { get; set; }
    private string _takeOutItemErrorMessage { get; set; }
    private string _deleteItemErrorMessage { get; set; }
    private InventoryItem _itemModel { get; set; }
    private string _tabFilter = "All";
    private string _sortBy = "dueDate";
    private string _sortDirection = "ascending";
    private int _takeQuantity;
    private User _user;
    private string _userName;
    private string _role;



    protected override void OnInitialized()
    {
        _items = InventoryItemService.GetAllItems();
        _requestedItems = InventoryItemService.GetAllRequestedItems();
        _user = UsersService.GetById(_globalState.CurrentUser.Id);
        _userName = _user.Username.ToString();

        _role = _user.Role.ToString();


    }

    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    private void OpenAddItemDialog()
    {
        _dialogTitle = "Add Item";
        _dialogOkLabel = "Add";
        _itemModel = new InventoryItem();
        _itemModel.Id = Guid.Empty;
        _showEditItemDialog = true;
    }

    private void SearchItemName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
        {
            // Get all items whose ItemName property contains the search term (case-insensitive)
            _items = InventoryItemService.GetAllItems().Where(t => t.ItemName.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
        else
        {
            // If the search term is empty or null, or if it has a length less than 3, return the full list of items
            _items = InventoryItemService.GetAllItems();
        }
    }

    private void OpenEditItemDialog(InventoryItem editItem)
    {
        _dialogTitle = "Edit Item";
        _dialogOkLabel = "Save";

        _itemModel = editItem;

        _showEditItemDialog = true;
    }
    private void OpenTakeOutItemDialog(InventoryItem takeItem)
    {
        _dialogTitle = "Take Item Out";
        _dialogOkLabel = "Take";

        _itemModel = takeItem;

        _showTakeOutItemDialog = true;
    }
    private void OpenDeleteItemDialog(InventoryItem InventoryItem)
    {
        _deleteItem = InventoryItem;
        _showDeleteItemDialog = true;
    }

    private void updateDate(ChangeEventArgs e)
    {
     
    }
    private void OnEditItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditItemDialog = false;
        }
        else
        {
            try
            {
                _editItemErrorMessage = "";
                if (_itemModel.Id == Guid.Empty)

                {
                    if (_itemModel.Quantity > 0 && !string.IsNullOrEmpty(_itemModel.ItemName))
                    {
                    _items = InventoryItemService.CreateItem(_itemModel.ItemName,_itemModel.Quantity );
                    InventoryItemService.UpdateDetailedInventory();
                        _showEditItemDialog = false; 
                    }
                    else{
                        _editItemErrorMessage = "Invalid name or quantity";
                    }
                }
                else
                {
                    _items = InventoryItemService.UpdateItem(_itemModel.Id, _itemModel.ItemName,_itemModel.Quantity
                   );
                    InventoryItemService.UpdateDetailedInventory();
                    _showEditItemDialog = false;
                }
                
            }
            catch (Exception e)
            {
                _editItemErrorMessage = e.Message;

            }
        }
    }

    private void OnTakeOutItemDialogClose(bool isCancel){
        if (isCancel){
            _showTakeOutItemDialog = false; 
        }
        else{
            try
            {                       
                _takeOutItemErrorMessage = "";
                if (_itemModel.Quantity < _takeQuantity)
                {
                    _takeOutItemErrorMessage = "You cannot take out more quantity than" + _itemModel.Quantity;
                }
                else if (_takeQuantity == 0){
                    _takeOutItemErrorMessage = "Invalid quantity";
                }
                else if (_itemModel.Quantity == 0){
                    _takeOutItemErrorMessage = "Sorry the item is out of stock";
                }
                else { 
                    _requestedItems = InventoryItemService.RequestItem(_userName, _itemModel.ItemName, _takeQuantity);
                    _showTakeOutItemDialog = false;
                
                }
                

            }
            catch (Exception e) {
                _takeOutItemErrorMessage = e.Message;
                
            }
        }

    }
    private void OnDeleteItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteItemDialog = false;
            _deleteItem = null;
        }
        else
        {
            try
            {
                _deleteItemErrorMessage = "";
                _items = InventoryItemService.DeleteItem( _deleteItem.Id);
                _showDeleteItemDialog = false;
                _deleteItem = null;
            }
            catch (Exception e)
            {
                _deleteItemErrorMessage = e.Message;
            }
        }
    }
    private void TabFilter(string status)
    {
        _tabFilter = status;
    }

}
